		  
(define (deep-reverse tree)
    (cond ((null? tree)         ; 空树
            (list))
          ((not (pair? tree))   ; 叶子
            tree)
          (else
            (reverse (list (deep-reverse (car tree))            ; 递归地逆序左右子树
                           (deep-reverse (cadr tree)))))))		; 之所以使用cadr源于list最后有一个nil空元素，否则返回一个两层嵌套的表


;another version						   
(define (deep-reverse tree)
    (cond ((null? tree)      
            (list))
          ((not (pair? tree))   
            tree)
          (else
            (list (deep-reverse (cadr tree))           
                   (deep-reverse (car tree))))))

; 以上两种代码只适用于二叉树的情况

改进版本：
(define (deep-reverse tree)
	(cond ((null? tree) (list))
		  ((not (pair? tree)) tree)
		  ((= (length tree) 2) (list (deep-reverse (cadr tree)) (deep-reverse (car tree))))
		  (else (list (deep-reverse (cdr tree)) (deep-reverse (car tree))))))
